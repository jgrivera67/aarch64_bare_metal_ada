'
' UML diagrams
'
' NOTE: To generate .svg files for the diagrams run 'plantuml -tsvg' on this file.
' To generate .latex files run 'plantuml -tlatex on this file.
' To render the diagrams, run 'plantuml -gui' on this file.
'
' author: German Rivera
'

@startuml arch64_bare_metal_tutorial_road_map
start
fork
  :Setting up Raspberry Pi board for bare-metal development;
fork again
  :Building the GNAT cross-toolchain from sources for bare-metal AArch64;
  :Building a minimal platform-independent Ada Runtime library (RTS);
end fork
:AArch64 bare-metal Ada "Hello world" program;
note right
  To verify that a minimal bare-metal
  program boots and UART output works
end note
:Writing your own UART boot loader for Raspberry Pi bare-metal programs;
note right
  To avoid having to update the SD card
  for every change
end note
:Writing your own bare-metal debug message logger in Ada;
note right
  To avoid always printing verbose debug
  messages to the UART
end note
:AArch64 bare-metal exception handling in Ada;
note right
  - To capture debug information when the bare-metal
    program crashes.
  - To verify that saving/restoring CPU registers
    works, needed for interrupt handling.
end note
fork
   :Writing your own self-hosted mini GDB server in Ada;
   note right
   To be able to get stack traces and read memory
   when the bare-metal program crashes.
   end note
   :AArch64 bare-metal memory protection using the ARMv8-A MMU;
   note right
   - To catch invalid memory accesses
   - Needed to enable caches which is necessary to
      support atomic primitives for multicore
      synchronization.
   end note
   :AArch64 bare-metal multicore in Ada;
fork again
   :AArch64 bare-metal interrupt handling in Ada;
end fork
:AArch64 bare-metal multicore interrupt handling in Ada;
fork
  #white:Write your own AArch64 multicore RTOS kernel in SPARK Ada;
fork again
  #white:Write your own AArch64 multicore separation kernel or hypervisor in SPARK Ada;
end fork
stop
@enduml

@startuml raspberrypi4_boot_sequence
'title RaspberryPI 4 Boot Sequence
actor "Power On Raspberry Pi 4"
"Power On Raspberry Pi 4" -> "ROM" : Boot first-stage bootloader
activate "ROM"
   "ROM" -> "SPI EEPROM" : Boot second-stage bootloader
   activate "SPI EEPROM"
      "SPI EEPROM" -> "SPI EEPROM" : Initialize DRAM
      activate "SPI EEPROM"
      deactivate "SPI EEPROM"
      "SPI EEPROM" -> "start.elf on SD card" : Boot OS bootloader
      activate "start.elf on SD card"
         "start.elf on SD card" -> "bare-metal binary on SD card" : Boot AArch64 Bare-meta Ada program to DRAM
         activate "bare-metal binary on SD card"
            "bare-metal binary on SD card" -> "bare-metal binary on SD card" : reset_handler
            activate "bare-metal binary on SD card"
               "bare-metal binary on SD card" -> "bare-metal binary on SD card" : main generated by gnatbind
               activate "bare-metal binary on SD card"
                  "bare-metal binary on SD card" -> "bare-metal binary on SD card" : Ada main subprogram
                  activate "bare-metal binary on SD card"
                  deactivate "bare-metal binary on SD card"
               deactivate "bare-metal binary on SD card"
            deactivate "bare-metal binary on SD card"
         deactivate "bare-metal binary on SD card"
      deactivate "start.elf on SD card"
   deactivate "SPI EEPROM"
deactivate "ROM"
@enduml

@startuml raspberrypi5_boot_sequence
'title RaspberryPI 5 Boot Sequence
actor "Power On Raspberry Pi 5"
"Power On Raspberry Pi 5" -> "ROM" : Boot first-stage bootloader
activate "ROM"
   "ROM" -> "SPI EEPROM" : Boot second-stage bootloader
   activate "SPI EEPROM"
      "SPI EEPROM" -> "SPI EEPROM" : Initialize DRAM
      activate "SPI EEPROM"
      deactivate "SPI EEPROM"
      "SPI EEPROM" -> "bl31 image (ATF) on SD card" : Boot OS bootloader
      activate "bl31 image (ATF) on SD card"
         "bl31 image (ATF) on SD card" -> "bare-metal binary on SD card" : Boot AArch64 Bare-meta Ada program to DRAM
         activate "bare-metal binary on SD card"
            "bare-metal binary on SD card" -> "bare-metal binary on SD card" : reset_handler
            activate "bare-metal binary on SD card"
               "bare-metal binary on SD card" -> "bare-metal binary on SD card" : main generated by gnatbind
               activate "bare-metal binary on SD card"
                  "bare-metal binary on SD card" -> "bare-metal binary on SD card" : Ada main subprogram
                  activate "bare-metal binary on SD card"
                  deactivate "bare-metal binary on SD card"
               deactivate "bare-metal binary on SD card"
            deactivate "bare-metal binary on SD card"
         deactivate "bare-metal binary on SD card"
      deactivate "bl31 image (ATF) on SD card"
   deactivate "SPI EEPROM"
deactivate "ROM"
@enduml
